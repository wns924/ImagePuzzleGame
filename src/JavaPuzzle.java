import java.awt.*;import java.awt.event.*;import java.awt.image.*;import javax.imageio.*;import javax.swing.*;import java.io.*;/** * A puzzle program  * This allows the user to select an image as a puzzle and the user can then play with the selected images * @author WongNgaiSum 3035380875 * @version 1.0 */public class JavaPuzzle {    private BufferedImage img;    private static int height = 800, width = 800;    private static int row = 10, col = 10;    private BufferedImage[] imgs;    private JLabel[] labels;    // labels that display the divided image    private Icon[] checking = new Icon[row * col];  // save the original image chunks    private JFrame jf;    private JPanel imgBlock;    private JTextArea txtArea;    private int pressed, released;  // save the pressed and released image blocks    private boolean cheated = false;    // whether user clicked "show original image" or not    public static void main(String[] args) {        JavaPuzzle game = new JavaPuzzle();        game.start();    }    /**     * Initial settings of the game     */    public void start() {        // Frame settings        jf = new JFrame("Puzzle Image");        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        jf.setSize(width, height + 200);        jf.setResizable(false);        // Image blocks settings        imgBlock = new JPanel();        imgBlock.setSize(width, height);        imgBlock.setLayout(new GridLayout(row, col, 0, 0));        imgBlock.setPreferredSize(new Dimension(width, height));        jf.getContentPane().add(BorderLayout.NORTH, imgBlock);        // Message Display settings        txtArea = new JTextArea("Please select an image file.\n");        jf.getContentPane().add(BorderLayout.CENTER, txtArea);        JScrollPane scroll = new JScrollPane(txtArea, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);        jf.add(scroll);        // Buttons settings        JPanel btns = new JPanel();        jf.getContentPane().add(BorderLayout.SOUTH, btns);        JButton btnSelectImage = new JButton("Load Another Image");        JButton btnShowOriginalImage = new JButton("Show Original Image");        JButton btnExit = new JButton("Exit");        btns.add(btnSelectImage);        btns.add(btnShowOriginalImage);        btns.add(btnExit);        // Add listeners        btnSelectImage.addActionListener(new SelectImage());        btnShowOriginalImage.addActionListener(new ShowOriginalImage());        btnExit.addActionListener(new ExitProgram());        jf.setVisible(true);    }    /**     * Listener for image selection     */    class SelectImage implements ActionListener {        /**         * Select image and start a new game         * @param ae Action event         */        public void actionPerformed(ActionEvent ae) {            JFileChooser fileChooser = new JFileChooser();            int returnValue = fileChooser.showOpenDialog(null);            if (returnValue == JFileChooser.APPROVE_OPTION) {                File selectedFile = fileChooser.getSelectedFile();                try {                    img = resizeImage(new File(selectedFile.getAbsolutePath()), height, width);                } catch (Exception e) {                    JOptionPane.showMessageDialog(null, "Please select another image file.", "Error", JOptionPane.INFORMATION_MESSAGE);                    img = null;                    return;                }                divideImage();                setImages();                txtArea.setText(null);                txtArea.append("Game started!\n");                cheated = false;            }        }    }    /**     * Listener for showing original image     */    class ShowOriginalImage implements ActionListener {        /**         * Show original image         * @param ae Action event         */        public void actionPerformed(ActionEvent ae) {            if (allCorrect()) return;            for (int i = 0; i < imgs.length; i++)                labels[i].setIcon(new ImageIcon(imgs[i]));            cheated = true; // user need to start a new game        }    }    /**     * Listener for exiting game     */    class ExitProgram implements ActionListener {        /**         * Exit game         * @param ae Action event         */        public void actionPerformed(ActionEvent ae) {            System.exit(0);        }    }    /**     * Listener for mouse movements on image labels     */    class LabelListener implements MouseListener {        public void mouseEntered(MouseEvent e) { }        public void mouseClicked(MouseEvent e) { }        public void mouseExited(MouseEvent e) { }        /**         * Swap images         * @param e Mouse event         */        public void mouseReleased(MouseEvent e) {            if (allCorrect() || cheated) {  // clicked "show original image" or finished the game                txtArea.append("Please start a new game.\n");                return;            }            int x = e.getXOnScreen() - jf.getLocation().x;            int y = e.getYOnScreen() - jf.getLocation().y - (jf.getHeight() - jf.getContentPane().getHeight());            if (x > width || y > height || x < 0 || y < 0)  return; // released coordinate out of  game area            int c = x / (width / col);  // column no.            int r = y / (height / row); // row no.            released = r * col + c; // index of images            if (labels[released].getIcon() == checking[released]) { // destination image is on correct position                txtArea.append("Cannot swap. Image block is placed on original correct position.\n");                return;            }            // swap images            Icon tmp = labels[pressed].getIcon();            labels[pressed].setIcon(labels[released].getIcon());            labels[released].setIcon(tmp);            // the pressed image is swapped to correct position            if (labels[pressed].getIcon() == checking[pressed])                txtArea.append("Image block in correct position!\n");            // another image is swapped to correct position            if (labels[released].getIcon() == checking[released])                txtArea.append("Image block in correct position!\n");            if (allCorrect())   // display msgbox if win                JOptionPane.showMessageDialog(null, "You win!!!.", "Message", JOptionPane.INFORMATION_MESSAGE);        }        /**         * Get the pressed position of images         * @param e Mouse event         */        public void mousePressed(MouseEvent e) {            int x = e.getXOnScreen() - jf.getLocation().x;            int y = e.getYOnScreen() - jf.getLocation().y - (jf.getHeight() - jf.getContentPane().getHeight());            int c = x / (width / col);  // row no.            int r = y / (height / row); // column no.            pressed = r * col + c;  // index of images        }    }    /**     * Resize selected image to certain size     * @param img image file selected by user     * @param height desired height     * @param width desired width     * @return buffered image     * @throws IOException Exception when cant open image     */    public BufferedImage resizeImage(File img, int height, int width) throws IOException {        BufferedImage image = ImageIO.read(img);        Image tmp = image.getScaledInstance(width, height, Image.SCALE_SMOOTH);        BufferedImage resized = new BufferedImage(width, height, image.getType());        Graphics2D g2d = resized.createGraphics();        g2d.drawImage(tmp, 0, 0, null);        g2d.dispose();        return resized;    }    /**     * Divide the selected image into chunks     */    public void divideImage() {        int chunkWidth = width / col;        int chunkHeight = height / row;        int count = 0;        imgs = new BufferedImage[row * col];        for (int x = 0; x < row; x++)            for (int y = 0; y < col; y++) {                imgs[count] = new BufferedImage(chunkWidth, chunkHeight, img.getType());                Graphics2D gr = imgs[count++].createGraphics();                gr.drawImage(img, 0, 0, chunkWidth, chunkHeight, chunkWidth * y, chunkHeight * x, chunkWidth * y + chunkWidth, chunkHeight * x + chunkHeight, null);                gr.dispose();            }    }    /**     * Display the images on screen     */    public void setImages() {        imgBlock.removeAll();        imgBlock.revalidate();        imgBlock.repaint();        labels = new JLabel[imgs.length];        for (int i = 0; i < imgs.length; i++) {            labels[i] = new JLabel(new ImageIcon(Toolkit.getDefaultToolkit().createImage(imgs[i].getSource())));            labels[i].addMouseListener(new LabelListener());            imgBlock.add(labels[i]);            checking[i] = labels[i].getIcon();        }        randomizeImages();        SwingUtilities.updateComponentTreeUI(jf);   // refresh    }    /**     *  Randomise the images' positions on screen     */    public void randomizeImages() {        Icon tmp;        int rdm;        for(int i = 0; i < labels.length; i++) {            rdm = (int) (Math.random() * (labels.length));            tmp = labels[i].getIcon();            labels[i].setIcon(labels[rdm].getIcon());            labels[rdm].setIcon(tmp);        }    }    /**     * Check whether the images are all in correct position     * @return result     */    public boolean allCorrect() {        for (int i = 0; i < row * col; i++)            if (labels[i].getIcon() != checking[i])                return false;        return true;    }}